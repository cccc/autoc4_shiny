var autoc4,__awaiter=this&&this.__awaiter||function(e,o,n,i){return new(n||(n=Promise))((function(t,s){function c(e){try{l(i.next(e))}catch(e){s(e)}}function r(e){try{l(i.throw(e))}catch(e){s(e)}}function l(e){var o;e.done?t(e.value):(o=e.value,o instanceof n?o:new n((function(e){e(o)}))).then(c,r)}l((i=i.apply(e,o||[])).next())}))};import{mqtt_match_topic,generateUUID}from"./utils.js";var __AUTOC4_CONFIG_LOCATION=__AUTOC4_CONFIG_LOCATION||"config.json";$((function(){$.getJSON(__AUTOC4_CONFIG_LOCATION).done((function(e){e.debug&&e.debug.configLoaded&&console.debug("Config loaded successfully",e),autoc4=new AutoC4(e)})).fail((function(e,o){console.error("Couldn't load config.json",e,o)}))}));export class AutoC4{constructor(e){this.modules=[],this._moduleTypes={},this.config=e,this.client=new Paho.MQTT.Client(e.server||window.location.hostname,e.port||9e3,(e.clientIdPrefix||"shiny_")+generateUUID()),this.client.onMessageArrived=this.onMessage.bind(this),this.client.onConnectionLost=this.onConnectionFailure.bind(this),this.loadPlugins().then(e=>{e.forEach(e=>e.default(this)),this.loadModules(),this.connect()}).catch(e=>console.error("Failed to load plugins.",e))}loadPlugins(){return __awaiter(this,void 0,void 0,(function*(){return yield Promise.all(this.config.plugins.map(e=>__awaiter(this,void 0,void 0,(function*(){return import(e).then(o=>__awaiter(this,void 0,void 0,(function*(){return this.config.debug&&this.config.debug.pluginLoaded&&console.debug(`Successfully loaded plugin: ${e}`,o),o}))).catch(o=>__awaiter(this,void 0,void 0,(function*(){throw console.error(`Failed to load plugin: ${e}`,o),o})))}))))}))}loadModules(){for(const e of this.config.modules)try{e.instance=this.moduleConfigToModule(e).init(this,e.options),this.modules.push(e.instance),this.config.debug&&this.config.debug.moduleLoaded&&console.debug(`Successfully initialized module of type "${e.type}".`,e)}catch(o){console.error("An error occured while initializing a module."),console.error("Module Type: ",e.type),console.error(o)}}connect(){this.client.connect({onSuccess:this.onConnect.bind(this),onFailure:this.client.onConnectionLost,mqttVersion:3})}onMessage(e){this.config.debug.message&&console.debug("MQTT message received:",e);for(let o of this.config.modules)try{o.subscribe&&o.subscribe.some(o=>mqtt_match_topic(o,e.destinationName))&&o.instance.onMessage(this,e)}catch(e){console.error("An error occured while processing a message."),console.error("Module: ",o.instance),console.error(e)}}onConnect(e){this.config.debug&&this.config.debug.connect&&console.debug("MQTT connection successfull.",e);for(let e of this.config.modules)if(e.subscribe)for(let o of e.subscribe)this.client.subscribe(o);for(let o of this.modules)try{o.onConnect(this,e)}catch(e){console.error("An error occured while handling disconnect."),console.error("Module: ",o),console.error(e)}}onConnectionFailure(e){this.config.debug&&this.config.debug.disconnect&&console.warn("MQTT connection failure, retrying in 5 seconds..",e),setTimeout((function(e){e.connect()}),5e3,this);for(let o of this.modules)try{o.onConnectionFailure(this,e)}catch(e){console.error("An error occured while handling disconnect."),console.error("Module: ",o),console.error(e)}}sendData(e,o,n=!1){let i=new Paho.MQTT.Message(o);i.destinationName=e,i.retained=n,this.client.send(i),this.config.debug&&this.config.debug.sentMessage&&console.debug("Sent MQTT Message:",i)}sendByte(e,o,n=!1){this.sendData(e,new Uint8Array(void 0===o?[0]:[o]),n)}registerModuleType(e,o){this._moduleTypes[e]=o}moduleConfigToModule(e){if(e.type in this._moduleTypes)return this._moduleTypes[e.type]();throw new Error(`Unknown module type: ${e.type}`)}}
//# sourceMappingURL=autoc4.min.js.map
