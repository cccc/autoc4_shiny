const _notificationQueue=[];let _currentNotificationTimeout=void 0;const _notificationContainer=document.createElement("div");_notificationContainer.classList.add("notify-container");export function setMessage(t){document.body.contains(_notificationContainer)&&document.body.removeChild(_notificationContainer),_notificationContainer.textContent="",t&&(_notificationContainer.appendChild(t),document.body.appendChild(_notificationContainer))}export function nextMessage(){const t=_notificationQueue.shift();void 0===t?(_currentNotificationTimeout=void 0,setMessage(void 0)):(_currentNotificationTimeout=setTimeout(nextMessage,t&&t.duration),setMessage(t&&t.node))}export function notify(t,o){if(t instanceof Node)_notificationQueue.push({node:t,duration:o||1500});else{const i=document.createElement("div");i.classList.add("notify-message"),i.appendChild(document.createTextNode(t)),_notificationQueue.push({node:i,duration:o||1500})}void 0===_currentNotificationTimeout&&nextMessage()}class AutoC4Notify{init(t,o){return this.options=o,this.autoc4=t,this}onMessage(t,o){o.payloadString;notify(this.options.textTemplate.split(this.options.payloadStringPlaceholder).join(""),this.options.hideDelayMs)}onConnect(t,o){}onConnectionFailure(t,o){}}export default t=>t.registerModuleType("notify",()=>new AutoC4Notify);
//# sourceMappingURL=notify.min.js.map
